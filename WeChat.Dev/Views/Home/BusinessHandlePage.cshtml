
@{
    ViewBag.Title = "流程处理";
    ViewBag.AppCode = Zap.WeChat.SDK.Constants.MOBILE_APPROVAL_TEST;
    ViewBag.WebSite = "http://douhua.oicp.net";
    Layout = "~/Views/Shared/_WeuiLayout.cshtml";
}
<div class="container" id="container" data-jssdkconfig='@Html.Raw(ViewBag.JSSDKConfig)'>
    <div class="weui-form-preview" id="handle_form_preview"></div>
    <div class="weui-form-preview__ft fixed_b">
        <a class="weui-form-preview__btn weui-form-preview__btn_default" onclick="utils.jumpLink('BACK')">取消</a>
        <a class="weui-form-preview__btn weui-form-preview__btn_primary" onclick="execute(this)" href="javascript:">提交</a>
    </div>
</div>
@section scripts{
    <script src="http://res.wx.qq.com/open/js/jweixin-1.2.0.js"></script>
    <script type="text/html" id="tpl_cclist">
        {{each ccItems}}
        <div class="cc-item">
            <img class="img-item" src="{{$value.avatar||'@Url.Content("~/Content/images/icon_tabbar.png")'}}" />
            <a href="javascript:;" class="cc-close" data-userid="{{$value.id}}">X</a>
        </div>
        {{/each}}
        <a href="javascript:;" class="cc-item cc-add"></a>
    </script>
    <script id="tpl_handleformpreview" type="text/html">
        <div class="weui-form-preview__hd">
            <label class="weui-form-preview__label">处理意见</label>
            <div class="weui-form-preview__value content">
                <div class="weui-cells weui-cells_form" style="margin-top:0;">
                    <div class="weui-cell">
                        <div class="weui-cell__bd">
                            <textarea class="weui-textarea" id="suggestion" name="suggestion" rows="3">{{$data.contentComponent.value}}</textarea>
                            @*<div class="weui-textarea-counter"><span>0</span>/200</div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="weui-form-preview__bd">
            {{if $data.ccComponent.show}}
            <div class="weui-form-preview__item">
                <label class="weui-form-preview__label">{{$data.ccComponent.label}}</label>
            </div>
            <div class="weui-form-preview__item text-left">
                <div class="cclist" id="cclist_items">
                    <a href="javascript:;" class="cc-item cc-add"></a>
                </div>
            </div>
            {{/if}}
            {{if $data.stepComponent.show}}
            <div class="weui-form-preview__item">
                <label class="weui-form-preview__label">{{$data.stepComponent.label}}</label>
                <div class="weui-form-preview__value" id="step">
                    <i class="weui-loading"></i><span class="weui-loadmore__tips">正在加载</span>
                </div>
            </div>
            {{/if}}
            {{if $data.principalComponent.show}}
            <div class="weui-form-preview__item">
                <label class="weui-form-preview__label">{{$data.principalComponent.label}}</label>
                <ul class="weui-form-preview__value node-auditors" id="auditor">
                    <li><i class="weui-loading"></i><span class="weui-loadmore__tips">正在加载</span></li>
                </ul>
            </div>
            {{/if}}
            {{if $data.switchComponent.show}}
            <div class="weui-form-preview__item text-left">
                <div class="weui-cell weui-cell_switch" style="padding-left:0;padding-right:0;">
                    <div class="weui-cell__bd">{{$data.switchComponent.label}}</div>
                    <div class="weui-cell__ft">
                        <input class="weui-switch" id="switchAgain" name="switchAgain" type="checkbox">
                    </div>
                </div>
            </div>
            {{/if}}
        </div>
    </script>
    <script type="text/javascript">
        var ccids = [], currentHandleType = undefined, appendData = undefined;
        try {
            init();
            initJSSDK();
            bindEvents();
        } catch (e) {
            console.error(e)
            weui.alert(e.message)
        }

        function init() {
            var previewEl = document.querySelector('#handle_form_preview');
            var preview = renderForm();
            previewEl.innerHTML = preview;
        }

        //渲染处理表单
        function renderForm() {
            var data = {};
            var extra = JSON.parse(sessionStorage.getItem("extra"));
            var defaults = {
                contentComponent: {
                    value: ''
                },
                stepComponent: {
                    label: '下一处理步骤',
                    show: true
                },
                principalComponent: {
                    label: '下一步责任人',
                    show: true
                },
                switchComponent: {
                    label: '打回重走',
                    show: false
                },
                ccComponent: {
                    label: '抄送人', //协商人 接收人
                    multiple: true,
                    show: true
                }
            };

            if (!extra || typeof (extra.handleType) !== "number") {
                throw new Error("参数 handleType 无效");
                return
            }

            currentHandleType = extra.handleType;

            switch (extra.handleType) {

                case enums.handleType.Assign: //同意
                    data = _.assignIn(defaults, { contentComponent: { value: extra.suggestion } });
                    initNextNode();
                    break;
                case enums.handleType.AgainInitiate://重新发起
                case enums.handleType.JointSignature://会签
                case enums.handleType.Urge://催办
                case enums.handleType.Recall://撤回
                    data = _.assignIn(defaults, { contentComponent: { value: extra.suggestion } });
                    break;
                case enums.handleType.Transfer: //授权交办
                    data = _.assignIn(defaults, {
                        contentComponent: { value: extra.suggestion },
                        ccComponent: {
                            label: '接收人',
                            multiple: false,
                            show: true
                        },
                        stepComponent: { show: false },
                        principalComponent: { show: false }
                    });
                    break;
                case enums.handleType.ToStart://打回到发起
                    data = _.assignIn(defaults, {
                        contentComponent: { value: extra.suggestion },
                        switchComponent: { show: true, label: '打回重走' }
                    });
                    initNextNode(2);
                    break;
                case enums.handleType.ToPrev://打回到上一步
                    data = _.assignIn(defaults, { contentComponent: { value: extra.suggestion } });
                    initNextNode(2);
                    break;
                case enums.handleType.LaunchConsult: //发起协商
                    data = _.assignIn(defaults, {
                        contentComponent: { value: extra.suggestion },
                        ccComponent: {
                            label: '接收人',
                            multiple: false,
                            show: true
                        },
                        stepComponent: { show: false },
                        principalComponent: { show: false }
                    });
                    break;
                case enums.handleType.Cancel: //作废
                    data = _.assignIn(defaults, {
                        contentComponent: { value: extra.suggestion },
                        stepComponent: { show: false },
                        principalComponent: { show: false }
                    });
                    appendData = '{"WfNodeExtendType":"' + extra.netype + '"}';
                    break;
                case enums.handleType.AnswerAssign: //回复协商
                    data = _.assignIn(defaults, { contentComponent: { value: extra.suggestion } });
                    appendData = '{"WfNodeExtendGuid":"' + extra.WfNodeExtendGuid + '"}';
                    break;
                default:
                    initNextNode();
                    appendData = '{"WfNodeExtendType":"' + extra.netype + '"}';
                    break;
            }

            var htmlStr = template('tpl_handleformpreview', data);
            return htmlStr;
        }

        function bindEvents() {
            var el = document.getElementById('cclist_items');
            if (el) {
                el.addEventListener('click', function (e) {
                    var sourceEl = e.target;
                    var selectEl = this.querySelector('a.cc-add');
                    if (sourceEl.tagName.toLowerCase() === 'a' && sourceEl.classList.contains('cc-add')) {
                        try {
                            var cclistEl = document.querySelector('#cclist_items');
                            var lastChildEl = cclistEl.querySelector('a.cc-add');
                            var selectedUserIds = utils.dateset(cclistEl, "selectUserids", true) || ccids || [];
                            invokeAddressList(null, selectedUserIds);
                        } catch (e) {
                            alert(e.message);
                        }
                    } else if (sourceEl.tagName.toLowerCase() === 'a' && sourceEl.classList.contains('cc-close')) {
                        //删除
                        removeCCElment(sourceEl);
                    }
                })
            }
        }

        function initJSSDK() {

            var containerEl = document.getElementById('container');
            var jssdkconfig = JSON.parse(containerEl.dataset.jssdkconfig);
            var defaults = {
                beta: true,// 必须这么写，否则在微信插件有些jsapi会有问题
                debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
                jsApiList: ['selectEnterpriseContact'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2
            };
            var options = _.assignIn(defaults, jssdkconfig);
            wx.config(options);

            wx.ready(function () {
                // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。
            });
            wx.error(function (res) {
                // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。
                weui.alert(JSON.stringify(res));
            });
        }

        //唤醒通讯录
        function invokeAddressList(mode, selectedUserIds) {
            wx.invoke("selectEnterpriseContact", {
                "fromDepartmentId": 0,// 必填，-1表示打开的通讯录从自己所在部门开始展示, 0表示从最上层开始
                "mode": mode || "multi",// 必填，选择模式，single表示单选，multi表示多选
                //"type": ["department", "user"],// 必填，选择限制类型，指定department、user中的一个或者多个
                "type": ["user"],
                "selectedDepartmentIds": [],// 非必填，已选部门ID列表。用于多次选人时可重入
                "selectedUserIds": selectedUserIds// 非必填，已选用户ID列表。用于多次选人时可重入
            }, function (res) {
                if (res.err_msg == "selectEnterpriseContact:ok") {
                    //alert(JSON.stringify(res.result));
                    if (typeof res.result == 'string') {
                        res.result = JSON.parse(res.result) //由于目前各个终端尚未完全兼容，需要开发者额外判断result类型以保证在各个终端的兼容性
                    }
                    //var selectedDepartmentList = res.result.departmentList;// 已选的部门列表
                    //for (var i = 0; i < selectedDepartmentList.length; i++) {
                    //    var department = selectedDepartmentList[i];
                    //    var departmentId = department.id;// 已选的单个部门ID
                    //    var departemntName = department.name;// 已选的单个部门名称
                    //}
                    var selectedUserList = res.result.userList; // 已选的成员列表
                    //var fragment = document.createDocumentFragment();
                    //for (var i = 0; i < selectedUserList.length; i++) {
                    //    var user = selectedUserList[i];
                    //    //var userId = user.id; // 已选的单个成员ID
                    //    //var userName = user.name;// 已选的单个成员名称
                    //    //var userAvatar = user.avatar;// 已选的单个成员头像
                    //    var ccEl = document.createElement('div');
                    //    var img = document.createElement('img');
                    //    var aClose = document.createElement('a');
                    //    img.src = user.avatar;
                    //    img.classList.add('img-item');
                    //    aClose.classList.add('cc-close');
                    //    aClose.dataset.id = user.id;
                    //    aClose.href = "javascript:;";
                    //    aClose.innerText = "X";
                    //    ccEl.classList.add('cc-item');
                    //    ccEl.appendChild(img);
                    //    ccEl.appendChild(aClose);
                    //    fragment.appendChild(ccEl);
                    //}
                    //cclistEl.insertBefore(fragment, lastChildEl);
                    addCCElement(selectedUserList)
                }
            });
        }

        //过滤
        function filterCCData(data) {
            var cclistEl = document.querySelector('#cclist_items');
            ccids = data.map(function (cc) {
                return cc.id;
            });
            cclistEl.setAttribute("data-selectUserids", JSON.stringify(ccids));
            return data;
        }

        //添加抄送人
        function addCCElement(data) {
            var result = filterCCData(data);
            var ccEl = null, imgEl = null, closeEl = null,
                fragment = document.createDocumentFragment();
            result.forEach(function (cc) {
                ccEl = document.createElement('div');
                imgEl = document.createElement('img');
                closeEl = document.createElement('a');

                imgEl.src = cc.avatar;
                imgEl.classList.add('img-item');
                closeEl.classList.add('cc-close');
                closeEl.setAttribute("userid", cc.id);
                closeEl.href = "javascript:;";
                closeEl.innerText = "X";
                ccEl.classList.add('cc-item');
                ccEl.appendChild(imgEl);
                ccEl.appendChild(closeEl);
                fragment.appendChild(ccEl);
            })
            var cclistEl = document.querySelector('#cclist_items');
            var lastChildEl = cclistEl.querySelector('a.cc-add');
            cclistEl.insertBefore(fragment, lastChildEl);
        }

        //删除抄送人
        function removeCCElment(sourceEl) {
            var cclistEl = document.querySelector('#cclist_items');
            var parentNode = sourceEl.parentNode;
            var userid = utils.dataset(sourceEl, "userid");

            var delIndex = ccids.findIndex(function (ccid) {
                return ccid == userid;
            })

            ccids.splice(delIndex, 1);
            cclistEl.setAttribute("data-selectUserids", JSON.stringify(ccids));
            parentNode.remove();
        }

        //获取表单数据
        function getFormData(el) {
            el.classList.add('weui-btn_loading');
            el.style.background = '#eee';
            el.style.color = '#999';
            el.innerHTML = '<i class="weui-loading"></i> Loading';
            //var form = {
            //    ccids: ccids,
            //    suggestion: document.getElementById('suggestion').value
            //}
            var suggestionEl = document.getElementById('suggestion');
            var switchAgainEl = document.getElementById('switchAgain');
            var data = JSON.parse(sessionStorage.getItem("flow_data"));
            return {
                FlowInstanceGuid: data.fi.FlowInstanceGuid,
                FlowHandleType: currentHandleType,
                DisagreeHandleType: currentHandleType,
                HandlerSuggestion: suggestionEl.value,
                RelativePersonGuid: ccids.join(','),
                RelativePerson: '',//接收人名称
                ToPreviousStep: false, //打回到上一步
                ToInitialStep: false, //打回到发起
                RunPathAgain: switchAgainEl && switchAgainEl.checked,//打回重走
                RecipientPerson: '',
                RecipientPersonGuid: '',
                FlowTemplateGuid: data.fi.FlowTemplateGuid,
                StepGuid: data.step.StepGuid,
                StepInstanceGuid: data.step.StepInstanceGuid,
                AppendData: appendData
            };

        }

        //流程处理
        function execute(el) {
            var loading = weui.loading();
            try {
                var data = getFormData(el);
                validate(data);
                console.log(data)
                weui.alert(JSON.stringify(data), function () {
                    el.classList.remove('weui-btn_loading');
                    el.style.background = '';
                    el.innerHTML = '提交';
                })
                loading.hide();
            } catch (e) {
                el.classList.remove('weui-btn_loading');
                el.style.background = '';
                el.innerHTML = '提交';
                weui.alert(e.message);
                loading.hide();
            }

        }

        //验证数据
        function validate(data) {
            if (currentHandleType !== 0 && !currentHandleType) {
                weui.alert("保存失败");
                return
            }
            if (!data.HandlerSuggestion) {
                throw new Error("请输入意见");
            }
            switch (currentHandleType) {

                case enums.handleType.Assign: //同意

                    break;
                case enums.handleType.AnswerAssign: //回复协商

                    break;
                case enums.handleType.AgainInitiate://重新发起

                    break;
                case enums.handleType.JointSignature://会签

                    break;
                case enums.handleType.Urge://催办

                    break;
                case enums.handleType.Recall://撤回

                    break;
                case enums.handleType.Transfer: //授权交办
                    if (!data.RelativePersonGuid)
                        throw new Error("请选择一个接收人");
                    ccidArr = data.RelativePersonGuid.split(',');
                    if (ccidArr.length > 1) {
                        throw new Error("只能选择一个接收人");
                    }
                    break;
                case enums.handleType.ToStart://打回到发起

                    break;
                case enums.handleType.ToPrev://打回到上一步

                    break;
                case enums.handleType.LaunchConsult: //发起协商
                    if (!data.RelativePersonGuid)
                        throw new Error("请选择至少一个抄送人");
                    ccidArr = data.RelativePersonGuid.split(',');
                    if (!ccidArr.length)
                        throw new Error("请选择至少一个抄送人");
                    break;
                case enums.handleType.Cancel: //作废

                    break;
                default:
                    break;
            }
        }

        //初始化下一个节点信息 num 枚举 上一步2 下一步0 第一步
        function initNextNode(num) {
            var data = JSON.parse(sessionStorage.getItem("flow_data"));
            num = num || 0;
            var options = {
                url: '../MA/flowform/getnextnode',
                data: { fiGuid: data.fi.FlowInstanceGuid, type: num },
                dataType: 'json',
                timeout: 7000,
                success: function (data) {

                },
                error: function (xhr, textStatus, errorThrow) {
                    alert(textStatus);
                }, complete: function (xhr, textStatus) {
                    layer.close(win_id);
                }
            };
            setTimeout(function () {
                var data = {
                    StepName: "经理审批",
                    StepHandMode: 0,
                    Auditors: ['杜宋思仪', '李成', '文杰', '陈丽']
                };
                var ul = document.getElementById('auditor');
                var fragment = document.createDocumentFragment();
                if (data.Auditors && data.Auditors.length) {
                    data.Auditors.forEach(function (currValue, index, self) {
                        var li = document.createElement('li');
                        var p = document.createElement('p');
                        li.classList.add('auditor');
                        if (data.StepHandMode == 2 && self.length > 1) {
                            var i = document.createElement('i');
                            i.innerText = ",";
                            li.appendChild(i);
                        }
                        p.innerText = "@@" + currValue;
                        li.appendChild(p);
                        fragment.appendChild(li);
                    });
                    ul.innerHTML = "";
                    ul.appendChild(fragment);
                }
                document.getElementById('step').innerHTML = data.StepName;
            }, 1000)
        }
    </script>
}
